plugins {
    id 'com.android.library'
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
    id 'org.jlleitschuh.gradle.ktlint'
    id 'mirego.kword' version '2.0.1'
    id 'jacoco'
}

group 'com.mirego.nwad'

android {
    compileSdkVersion 30
    defaultConfig {
        minSdkVersion 24
    }
    sourceSets {
        main.resources.srcDir('src/commonMain/resources/')
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }
    configurations {
        create("androidTestApi")
        create("androidTestDebugApi")
        create("androidTestReleaseApi")
        create("testApi")
        create("testDebugApi")
        create("testReleaseApi")
    }
}

kword {
    translationFile 'src/commonMain/resources/translations/translation.en.json'
    enumClassName 'com.mirego.nwad.localization.KWordTranslation'
    generatedDir 'src/commonMain/generated'
}

ktlint {
    disabledRules = ["import-ordering"]
}

kotlin {
    android() {
        publishLibraryVariants('release', 'debug')
    }

    ios() {
        binaries {
            framework {
                embedBitcode("disable")
                baseName = "$trikot_framework_name"
                transitiveExport = true
                export "com.mirego.trikot:trikotFoundation:$trikot_foundation_version"
                export "com.mirego.trikot:streams:$trikot_streams_version"
                export "com.mirego.trikot:viewmodels-declarative:$trikot_viewmodels_declarative_version"
                export "com.mirego.trikot:http:$trikot_http_version"
                export "com.mirego.trikot:kword:$trikot_kword_version"
            }
        }
    }

    js(IR) {
        moduleName = "nwad"

        browser {
            commonWebpackConfig {
                cssSupport.enabled = true
            }

            testTask {
                useKarma {
                    useChromeHeadless()
                }
            }
        }

        binaries.executable()
    }

    sourceSets {
        all {
            languageSettings {
                useExperimentalAnnotation('kotlin.Experimental')
                useExperimentalAnnotation('kotlin.time.ExperimentalTime')
                useExperimentalAnnotation('kotlin.js.ExperimentalJsExport')
                useExperimentalAnnotation('kotlinx.serialization.ExperimentalSerializationApi')
            }
        }

        commonMain {
            dependencies {
                api "com.mirego.trikot:trikotFoundation:$trikot_foundation_version"
                api "com.mirego.trikot:streams:$trikot_streams_version"
                api "com.mirego.trikot:viewmodels-declarative:$trikot_viewmodels_declarative_version"
                api "com.mirego.trikot:http:$trikot_http_version"
                api "com.mirego.trikot:kword:$trikot_kword_version"
                api "com.mirego.trikot:graphql:$trikot_graphql_version"
                api "com.mirego.trikot:datasources:$trikot_datasources_version"
                implementation("com.russhwolf:multiplatform-settings-no-arg:0.7.7")
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"
            }
            kotlin.srcDir(kword.generatedDir)
        }

        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        androidMain {
            dependsOn commonMain
            dependencies {
                implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
                implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
            }
            dependsOn commonMain
        }

        androidTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
                implementation "io.mockk:mockk:$mockk_version"
            }
        }

        iosMain {
            dependsOn commonMain
        }

        jsMain {
            dependsOn commonMain
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
                implementation "org.jetbrains.kotlin-wrappers:kotlin-extensions:1.0.1-pre.206-kotlin-$kotlin_version"
                implementation(npm("exports-loader", "1.1.1"))
                implementation(npm("raw-loader", "4.0.2"))
            }
        }

        jsTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-js"
                implementation(npm("exports-loader", "1.1.1"))
                implementation(npm("raw-loader", "4.0.2"))
            }
        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework() {
    def buildType = project.findProperty('kotlin.build.type') ?: 'RELEASE'
    def target = project.findProperty('kotlin.target') ?: 'iosArm64'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        def frameworkDir = "${targetDir}/${trikot_framework_name}.framework"
        def translationDir = "${projectDir}/../common/src/commonMain/resources/translations"
        copy {
            from srcFile.parent
            into targetDir
            include "${trikot_framework_name}.framework/**"
            include "${trikot_framework_name}.framework.dSYM/**"
        }
            copy {
            from translationDir
            into frameworkDir
            include "**"
        }
    }
}

project.afterEvaluate {
    project.tasks.findAll { task -> task.name.startsWith('compile') && task.name.contains('Kotlin') }.each { task ->
        task.dependsOn('kwordGenerateEnum')
    }
}

jacoco {
    toolVersion = "0.8.7"
    reportsDir = file("build/reports")
}

task jacocoTestReport(type: JacocoReport, dependsOn: "test") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def excludes = [
            '**/serializer.class',
            '**/factories**'
    ]
    getClassDirectories().setFrom(fileTree(
            dir: "build/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "build/tmp/kotlin-classes/debug",
            excludes: excludes
    ))
    getExecutionData().setFrom(files("build/jacoco/testDebugUnitTest.exec"))
    getSourceDirectories().setFrom(files([
            "src/commonMain/kotlin"
    ]))
}
