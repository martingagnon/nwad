import com.github.gradle.node.npm.task.NpxTask

buildscript {
    repositories {
        google()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "android.arch.navigation:navigation-safe-args-gradle-plugin:1.0.0"
        classpath 'com.android.tools.build:gradle:7.0.0-alpha15'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.5'
        classpath 'org.jlleitschuh.gradle:ktlint-gradle:10.0.0'
    }
}

plugins {
    id 'org.jetbrains.kotlin.js'
    id 'com.github.node-gradle.node' version '3.1.0'
}

repositories {
    google()
    jcenter()
    mavenLocal()
    maven { url "https://maven.pkg.jetbrains.space/kotlin/p/kotlin/kotlin-js-wrappers" }
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url "https://s3.amazonaws.com/mirego-maven/public" }
}

dependencies {
    api project(":common")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-js"
    testImplementation "org.jetbrains.kotlin:kotlin-test-js"

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"

    implementation("org.jetbrains:kotlin-react:$react_version-kotlin-1.5.0")
    implementation("org.jetbrains:kotlin-react-dom:$react_version-kotlin-1.5.0")
    implementation("org.jetbrains:kotlin-react-router-dom:5.2.0-pre.154-kotlin-1.5.0")
    implementation("org.jetbrains:kotlin-styled:5.2.3-pre.154-kotlin-1.5.0")

    implementation(npm("exports-loader", "1.1.1"))
    implementation(npm("raw-loader", "4.0.2"))
    implementation(npm("postcss", "8.2.15"))
    implementation(npm("postcss-loader", "4.2.0"))
    implementation(npm("autoprefixer", "10.2.5"))
    implementation(npm("tailwindcss", "2.1.2"))
}

kotlin {
    js(IR) {
        browser {
            commonWebpackConfig {
                cssSupport.enabled = true
            }

            testTask {
                useKarma {
                    useChromeHeadless()
                }
            }
        }

        binaries.executable()
    }
}

tasks.register("buildTailwindCss", NpxTask) {
    // Output CSS location
    def generatedFile = "build/processedResources/js/main/css/tailwind.css"

    // Location of the tailwind config file
    def tailwindConfig = "src/main/resources/css/tailwind-config.css"

    it.command.set("tailwind")
    args.set(["build", tailwindConfig, "-o", generatedFile])

    dependsOn(tasks.npmInstall)

    // The location of the source files which Tailwind scans when running `purgecss`
    it.inputs.dir("src/main/kotlin")

    it.inputs.file(tailwindConfig)
    it.outputs.file(generatedFile)
}

processResources {
    dependsOn("buildTailwindCss")
}
